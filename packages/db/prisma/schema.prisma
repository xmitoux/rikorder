generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model RikoImage {
  id         Int                @id @default(autoincrement())
  url        String
  uploadedAt DateTime           @map("uploaded_at")
  settings   RikoImageSetting[]
  rikords    Rikord[]

  @@map("riko_images")
}

model RikordMode {
  id          Int                @id
  modeName    String             @map("mode_name")
  monthlyGoal Int                @map("monthly_goal")
  settings    RikoImageSetting[]
  rikords     Rikord[]

  @@map("rikord_modes")
}

model RikoImageSetting {
  id           Int        @id @default(autoincrement())
  rikoImageId  Int        @map("riko_image_id")
  rikoImage    RikoImage  @relation(fields: [rikoImageId], references: [id], onDelete: Cascade)
  rikordModeId Int        @map("rikord_mode_id")
  rikordMode   RikordMode @relation(fields: [rikordModeId], references: [id])
  isFavorite   Boolean    @map("is_favorite")

  @@unique([rikoImageId, rikordModeId])
  @@map("riko_image_settings")
}

model Rikord {
  id           Int        @id @default(autoincrement())
  rikoImageId  Int        @map("riko_image_id")
  rikoImage    RikoImage  @relation(fields: [rikoImageId], references: [id], onDelete: Cascade)
  rikordModeId Int        @map("rikord_mode_id")
  rikordMode   RikordMode @relation(fields: [rikordModeId], references: [id])
  startedAt    DateTime   @map("started_at")
  finishedAt   DateTime   @map("finished_at")
  duration     Int
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("rikords")
}
